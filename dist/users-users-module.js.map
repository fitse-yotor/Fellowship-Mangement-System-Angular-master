{"version":3,"sources":["webpack:///./src/app/users/update-users/update-users.component.html","webpack:///./src/app/users/update-users/update-users.component.scss","webpack:///./src/app/users/update-users/update-users.component.ts","webpack:///./src/app/users/users-modal/users-modal.component.html","webpack:///./src/app/users/users-modal/users-modal.component.scss","webpack:///./src/app/users/users-modal/users-modal.component.ts","webpack:///./src/app/users/users-routing.module.ts","webpack:///./src/app/users/users.component.html","webpack:///./src/app/users/users.component.scss","webpack:///./src/app/users/users.component.ts","webpack:///./src/app/users/users.module.ts","webpack:///./src/app/users/users.service.ts"],"names":[],"mappings":"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","file":"users-users-module.js","sourcesContent":["module.exports = \"<p><!--<button mat-button (click)=\\\"onNoClick()\\\">No Thanks</button>-->\\r\\n  <!--<h1 mat-dialog-title>Hi {{data.name}}</h1>-->\\r\\n  <!--<div mat-dialog-content>-->\\r\\n  <!--<p>What's your favorite animal?</p>-->\\r\\n  <!--<mat-form-field>-->\\r\\n  <!--<input matInput [(ngModel)]=\\\"data.animal\\\">-->\\r\\n  <!--</mat-form-field>-->\\r\\n  <!--</div>-->\\r\\n\\r\\n<form [formGroup]=\\\"updateUsersForm\\\" (ngSubmit)=\\\"updateUsers(updateUsersForm.value)\\\">\\r\\n\\r\\n  <mat-form-field>\\r\\n    <input matInput placeholder=\\\"First Name\\\" type=\\\"text\\\" formControlName=\\\"firstname\\\">\\r\\n    <mat-error style=\\\"color: red\\\" *ngIf=\\\"updateUsersForm.get('firstname').invalid && (updateUsersForm.get('firstname').dirty ||\\r\\n      updateUsersForm.get('firstname').touched) && updateUsersForm.get('firstname').errors?.required\\\">\\r\\n      Please insert first name!\\r\\n    </mat-error>\\r\\n  </mat-form-field>\\r\\n\\r\\n  <mat-form-field>\\r\\n    <input matInput placeholder=\\\"Last Name\\\" type=\\\"text\\\" formControlName=\\\"lastname\\\">\\r\\n    <mat-error style=\\\"color: red\\\" *ngIf=\\\"updateUsersForm.get('lastname').invalid && (updateUsersForm.get('lastname').dirty ||\\r\\n      updateUsersForm.get('lastname').touched) && !updateUsersForm.get('lastname').errors?.minlength\\\">\\r\\n      Please insert last name!\\r\\n    </mat-error>\\r\\n\\r\\n  </mat-form-field><mat-form-field>\\r\\n    <input matInput placeholder=\\\"User Role\\\" type=\\\"text\\\" formControlName=\\\"user_role\\\">\\r\\n    <mat-error style=\\\"color: red\\\" *ngIf=\\\"updateUsersForm.get('user_role').invalid && (updateUsersForm.get('user_role').dirty ||\\r\\n      updateUsersForm.get('user_role').touched) && !updateUsersForm.get('user_role').errors?.minlength\\\">\\r\\n      Please insert user role!\\r\\n    </mat-error>\\r\\n  </mat-form-field>\\r\\n\\r\\n  <mat-form-field>\\r\\n    <input matInput placeholder=\\\"Phone number\\\" type=\\\"text\\\" formControlName=\\\"phone\\\">\\r\\n    <mat-error style=\\\"color: red\\\" *ngIf=\\\"updateUsersForm.get('phone').invalid && (updateUsersForm.get('phone').dirty ||\\r\\n      updateUsersForm.get('phone').touched) && !updateUsersForm.get('phone').errors?.minlength\\\">\\r\\n      Please insert phone number!\\r\\n    </mat-error>\\r\\n  </mat-form-field>\\r\\n\\r\\n  <mat-form-field>\\r\\n    <mat-label> User Role</mat-label>\\r\\n    <mat-select formControlName=\\\"user_role\\\">\\r\\n      <mat-option *ngFor=\\\"let user_role of universities\\\" [value]=\\\"user_role.value\\\">\\r\\n        {{user_role.viewValue}}\\r\\n      </mat-option>\\r\\n    </mat-select>\\r\\n  </mat-form-field>\\r\\n\\r\\n  <!--<button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" >Add contact</button>-->\\r\\n  <div mat-dialog-actions>\\r\\n    <button mat-button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\"  cdkFocusInitial >Update</button>\\r\\n    <button mat-button (click)=\\\"onNoClick()\\\">No Thanks</button>\\r\\n  </div>\\r\\n</form>\"","module.exports = \"\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef} from '@angular/material';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\n// import { UserRoleInterface } from '../../register/register';\r\n\r\nexport interface UpdateUsersInterface {\r\n    position?: string;\r\n    firstname: string;\r\n    user_role: string;\r\n    lastname: string;\r\n    phone: string;\r\n    university: string;\r\n}\r\n\r\n// export interface DialogData {\r\n//     animal: string;\r\n//     name: string;\r\n// }\r\n\r\n@Component({\r\n    selector: 'app-update-users',\r\n    templateUrl: './update-users.component.html',\r\n    styleUrls: ['./update-users.component.scss']\r\n})\r\nexport class UpdateUsersComponent implements OnInit {\r\n\r\n    updateUsersForm: any;\r\n    // user_role: UserRoleInterface[] = [\r\n    //     {value: 'Addis Ababa', viewValue: 'Addis Ababa'},\r\n    //     {value: 'Adama', viewValue: 'Adama'},\r\n    //     {value: 'Bahirdar', viewValue: 'Bahirdar'},\r\n    //     {value: 'Hawassa', viewValue: 'Hawassa'}\r\n    // ];\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        public dialogRef: MatDialogRef<UpdateUsersComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: UpdateUsersInterface) {}\r\n\r\n    onNoClick(): void {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // this.getEvent();\r\n        console.log(this.data);\r\n        this.updateUsersForm = this.formBuilder.group({\r\n            firstname: [this.data.firstname, [Validators.required]],\r\n            lastname: [this.data.lastname, [Validators.required]],\r\n            phone: [this.data.phone, [Validators.required]],\r\n            user_role: [this.data.user_role, [Validators.required]],\r\n        });\r\n    }\r\n\r\n    updateUsers(updateUsersInterface: UpdateUsersInterface) {\r\n        console.log(updateUsersInterface);\r\n    }\r\n}","module.exports = \"<!--<button mat-button (click)=\\\"onNoClick()\\\">No Thanks</button>-->\\r\\n<!--<h1 mat-dialog-title>Hi {{data.name}}</h1>-->\\r\\n<!--<div mat-dialog-content>-->\\r\\n<!--<p>What's your favorite animal?</p>-->\\r\\n<!--<mat-form-field>-->\\r\\n<!--<input matInput [(ngModel)]=\\\"data.animal\\\">-->\\r\\n<!--</mat-form-field>-->\\r\\n<!--</div>-->\\r\\n\\r\\n<form [formGroup]=\\\"usersModalForm\\\" (ngSubmit)=\\\"usersModal(usersModalForm.value)\\\">\\r\\n\\r\\n  <mat-form-field>\\r\\n    <input matInput placeholder=\\\"Full Name\\\" type=\\\"text\\\" formControlName=\\\"full_name\\\">\\r\\n    <mat-error style=\\\"color: red\\\" *ngIf=\\\"usersModalForm.get('full_name').invalid && (usersModalForm.get('full_name').dirty ||\\r\\n      usersModalForm.get('full_name').touched) && usersModalForm.get('full_name').errors?.required\\\">\\r\\n      Please insert first name!\\r\\n    </mat-error>\\r\\n  </mat-form-field>\\r\\n\\r\\n  <mat-form-field>\\r\\n    <input matInput placeholder=\\\"Email Address\\\" type=\\\"text\\\" formControlName=\\\"email_address\\\">\\r\\n    <mat-error style=\\\"color: red\\\" *ngIf=\\\"usersModalForm.get('email_address').invalid && (usersModalForm.get('email_address').dirty ||\\r\\n      usersModalForm.get('email_address').touched) && !usersModalForm.get('email_address').errors?.minlength\\\">\\r\\n      Please insert last name!\\r\\n    </mat-error>\\r\\n  </mat-form-field>\\r\\n\\r\\n  <mat-form-field>\\r\\n    <input matInput placeholder=\\\"Phone number\\\" type=\\\"text\\\" formControlName=\\\"phone\\\">\\r\\n    <mat-error style=\\\"color: red\\\" *ngIf=\\\"usersModalForm.get('phone').invalid && (usersModalForm.get('phone').dirty ||\\r\\n      usersModalForm.get('phone').touched) && !usersModalForm.get('phone').errors?.minlength\\\">\\r\\n      Please insert phone number!\\r\\n    </mat-error>\\r\\n  </mat-form-field>\\r\\n\\r\\n  <mat-form-field>\\r\\n    <mat-label>User Role</mat-label>\\r\\n    <mat-select formControlName=\\\"role\\\">\\r\\n      <mat-option *ngFor=\\\"let role of roles\\\" [value]=\\\"role.type\\\">\\r\\n        {{role.name}}\\r\\n      </mat-option>\\r\\n    </mat-select>\\r\\n  </mat-form-field>\\r\\n\\r\\n  <!--<button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" >Add contact</button>-->\\r\\n  <div mat-dialog-actions>\\r\\n    <button mat-button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\"  cdkFocusInitial >Add User</button>\\r\\n    <button mat-button (click)=\\\"onNoClick()\\\">Cancel</button>\\r\\n  </div>\\r\\n</form>\"","module.exports = \"\"","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MAT_DIALOG_DATA, MatDialogRef} from '@angular/material';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { UserRoleInterface } from '../users';\r\n\r\ninterface UsersModalInterface {\r\n    full_name: string;\r\n    email_address: string;\r\n    phone: string;\r\n    role: string;\r\n}\r\n\r\nexport interface DialogData {\r\n    animal: string;\r\n    name: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'app-users-modal',\r\n    templateUrl: './users-modal.component.html',\r\n    styleUrls: ['./users-modal.component.scss']\r\n})\r\nexport class UsersModalComponent implements OnInit {\r\n\r\n    usersModalForm: any;\r\n    roles: UserRoleInterface[] = [\r\n        {type: 'owner', name: 'Owner'},\r\n        {type: 'admin', name: 'Admin'},\r\n        {type: 'editor', name: 'Editor'},\r\n        {type: 'viewer', name: 'Viewer'}\r\n    ];\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        public dialogRef: MatDialogRef<UsersModalComponent>,\r\n        @Inject(MAT_DIALOG_DATA) public data: DialogData) {}\r\n\r\n    onNoClick(): void {\r\n        this.dialogRef.close();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // this.getEvent();\r\n        this.usersModalForm = this.formBuilder.group({\r\n            full_name: [null, [Validators.required]],\r\n            email_address: [null, [Validators.required]],\r\n            phone: [null, [Validators.required]],\r\n            role: [null, [Validators.required]],\r\n        });\r\n    }\r\n\r\n    usersModal(usersModalInterface: UsersModalInterface) {\r\n        console.log(usersModalInterface);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { UsersComponent } from './users.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: UsersComponent\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class UsersRoutingModule { }\r\n","module.exports = \"<p style=\\\"font-weight: bolder; font-size: x-large\\\"> Account User </p>\\r\\n<!--<ol>-->\\r\\n<!--<li>-->\\r\\n<!--<mat-form-field>-->\\r\\n<!--<input matInput [(ngModel)]=\\\"name\\\" placeholder=\\\"What's your name?\\\">-->\\r\\n<!--</mat-form-field>-->\\r\\n<!--</li>-->\\r\\n<!--<div class=\\\"create\\\" style=\\\"color: yellow; width: 100%\\\">-->\\r\\n<!--<li>-->\\r\\n<!--<button class=\\\"l1\\\" mat-raised-button (click)=\\\"openDialog()\\\">Create</button>-->\\r\\n<button style=\\\"margin-top: 61px; left: 15px; \\\" mat-raised-button (click)=\\\"openCreate()\\\">Add New User</button>\\r\\n<!--</li>-->\\r\\n<!--<li *ngIf=\\\"animal\\\">-->\\r\\n<!--You chose: <i>{{animal}}</i>-->\\r\\n<!--</li>-->\\r\\n<!--&lt;!&ndash;</ol>&ndash;&gt;-->\\r\\n<!--</div>-->\\r\\n\\r\\n<div class=\\\"container\\\">\\r\\n  <mat-form-field>\\r\\n    <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Search\\\">\\r\\n  </mat-form-field>\\r\\n\\r\\n  <table style=\\\"width: 100%\\\" mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\">\\r\\n\\r\\n    <!-- Position Column -->\\r\\n    <ng-container matColumnDef=\\\"position\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef style=\\\"font-weight: bold\\\"> ID </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.position}} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <!-- Name Column -->\\r\\n    <ng-container matColumnDef=\\\"full_name\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef style=\\\"font-weight: bold\\\">Full Name </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.full_name}} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <!-- Name Column -->\\r\\n    <ng-container matColumnDef=\\\"phone\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef style=\\\"font-weight: bold\\\">Phone Number </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.phone}} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <!-- Name Column -->\\r\\n    <ng-container matColumnDef=\\\"email\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef style=\\\"font-weight: bold\\\">Email </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.email}} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <!-- Weight Column -->\\r\\n    <ng-container matColumnDef=\\\"user_role\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef style=\\\"font-weight: bold\\\"> User Role </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.user_role}} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <!-- Symbol Column -->\\r\\n    <ng-container matColumnDef=\\\"created_date\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef style=\\\"font-weight: bold\\\"> Created Date </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.created_date}} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <!-- Symbol Column -->\\r\\n    <ng-container matColumnDef=\\\"updated_date\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef style=\\\"font-weight: bold\\\"> Updated Date </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.updated_date}} </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <!-- Symbol Column -->\\r\\n    <ng-container matColumnDef=\\\"action\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef style=\\\"font-weight: bold\\\"> Action </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n        <button mat-button=\\\"\\\">\\r\\n          <mat-icon  mat-raised-button (click)=\\\"openUpdate(element)\\\">edit</mat-icon></button>\\r\\n        <button mat-button=\\\"\\\">\\r\\n          <mat-icon style=\\\"color: red;\\\" mat-raised-button\\r\\n                    (click)=\\\"delete(element.id)\\\">delete_outline</mat-icon></button>\\r\\n      </td>\\r\\n    </ng-container>\\r\\n\\r\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n  </table>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { MatBottomSheet, MatBottomSheetRef, MatDialog, MatTableDataSource } from '@angular/material';\r\nimport { UsersModalComponent } from './users-modal/users-modal.component';\r\nimport { UpdateUsersComponent, UpdateUsersInterface } from './update-users/update-users.component';\r\nimport { UserRoleInterface } from '../users/users';\r\nimport { UsersService } from './users.service'\r\n\r\n\r\nexport interface PeriodicElement {\r\n    position: number;\r\n    full_name: string;\r\n    email: string;\r\n    phone: string;\r\n    user_role: string;\r\n    created_date: string;\r\n    updated_date: string;\r\n    action?: string;\r\n}\r\n\r\n\r\n\r\nconst ELEMENT_DATA: PeriodicElement[] = [\r\n    {position: 1, full_name: 'Yitages', email: 'yitages12@gmail.com', phone: '0912342421', user_role: 'Berhanu', created_date: 'Addis Ababa', updated_date: '12/3/2011'},\r\n    {position: 2, full_name: 'Meheret', email: 'meherett@gmail.com', phone: '0911374382', user_role: 'Tesfaye', created_date: 'Hawassa', updated_date: '24/5/2011'}\r\n];\r\n\r\n@Component({\r\n    selector: 'app-users',\r\n    templateUrl: './users.component.html',\r\n    styleUrls: ['./users.component.scss'],\r\n})\r\nexport class UsersComponent implements OnInit {\r\n\r\n    animal: string;\r\n    firstname: string;\r\n\r\n\r\n    // displayedColumns: string[] = ['position', 'firstname', 'lastname', 'user_role', 'phone', 'action'];\r\n    displayedColumns: string[] = ['position', 'full_name', 'email', 'phone', 'user_role', 'created_date', 'updated_date', 'action'];\r\n    dataSource = new MatTableDataSource(ELEMENT_DATA);\r\n    // dataSource: any;\r\n\r\n    constructor(\r\n        private matDialog: MatDialog,\r\n        private usersService: UsersService\r\n    ) { }\r\n\r\n    openCreate(): void {\r\n        const dialogRef = this.matDialog.open(UsersModalComponent, {\r\n            width: '500px',\r\n            data: {firstname: this.firstname, animal: this.animal}\r\n        });\r\n\r\n        dialogRef.afterClosed().subscribe(result => {\r\n            console.log('The dialog was closed');\r\n            this.animal = result;\r\n        });\r\n    }\r\n\r\n    // openImportUsers(): void {\r\n    //     const dialogRef = this.matDialog.open(ImportUsersComponent, {\r\n    //         width: '1000px'\r\n    //     });\r\n    //\r\n    //     dialogRef.afterClosed().subscribe(result => {\r\n    //         console.log('The dialog was closed');\r\n    //         this.animal = result;\r\n    //     });\r\n    // }\r\n\r\n    openUpdate(data: UpdateUsersInterface): void {\r\n        console.log(data);\r\n        const dialogRef = this.matDialog.open(UpdateUsersComponent, {\r\n            data: data,\r\n            width: '500px'\r\n        });\r\n\r\n        dialogRef.afterClosed().subscribe(result => {\r\n            console.log('The dialog was closed');\r\n            this.animal = result;\r\n        });\r\n    }\r\n\r\n    delete(id: string) {\r\n        console.log(id);\r\n        this.usersService.delete(id).subscribe(res => {\r\n            console.log(res);\r\n        }, err => {\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.collectionOfu()\r\n    }\r\n\r\n    applyFilter(filterValue: string) {\r\n        this.dataSource.filter = filterValue.trim().toLowerCase();\r\n    }\r\n\r\n    collectionOfu() {\r\n        this.usersService.collectionOfUsers().subscribe((res: any) => {\r\n            // console.log(res);\r\n            // console.log(res.users.data);\r\n            this.dataSource = new MatTableDataSource(res.users.data);\r\n        }, err => {\r\n            console.log(err);\r\n        })\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UsersComponent } from './users.component';\r\nimport { UsersRoutingModule } from './users-routing.module';\r\nimport { MaterialsModule } from '../utils/materials.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { Ng2SmartTableModule } from 'ngx-smart-table';\r\nimport { UsersModalComponent } from './users-modal/users-modal.component';\r\nimport { UpdateUsersComponent } from './update-users/update-users.component';\r\nimport { UsersService } from './users.service';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        MaterialsModule,\r\n        HttpClientModule,\r\n        ReactiveFormsModule,\r\n        Ng2SmartTableModule,\r\n        UsersRoutingModule\r\n    ],\r\n    declarations: [UsersComponent, UsersModalComponent, UpdateUsersComponent],\r\n    providers: [UsersService],\r\n    entryComponents: [ UsersModalComponent, UpdateUsersComponent, UsersComponent ]\r\n})\r\nexport class UsersModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UsersService {\r\n\r\n  constructor(\r\n      private httpClient: HttpClient\r\n  ) { }\r\n\r\n  collectionOfUsers() {\r\n        return this.httpClient.get('http://localhost:3232/api/users')\r\n  }\r\n\r\n  delete(id: string) {\r\n    return this.httpClient.delete(`http://localhost:3232/api/user/${id}`)\r\n  }\r\n}\r\n"],"sourceRoot":""}